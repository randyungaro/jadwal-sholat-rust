use slint::SharedString;
use serde::{Deserialize, Serialize};
use reqwest::blocking::get;
use chrono::{Utc, Datelike};
// Generated by Slint from ui.slint
slint::include_modules!();

#[derive(Serialize, Deserialize, Debug)]
struct PrayerTimes {
    data: Data,
}

#[derive(Serialize, Deserialize, Debug)]
struct Data {
    jadwal: Jadwal,
}

#[derive(Serialize, Deserialize, Debug)]
struct Jadwal {
    tanggal: String,
    imsak: String,
    subuh: String,
    dhuha: String,
    dzuhur: String,
    ashar: String,
    maghrib: String,
    isya: String,
}

fn main() -> Result<(), slint::PlatformError> {
    // Load the UI from the .slint file
    let ui = PrayerTimesWindow::new()?;

    // Add some error handling for API requests
    let url = format!(
        "https://api.myquran.com/v2/sholat/jadwal/1301/{}/{}/{}", 
        Utc::now().year(),
        Utc::now().month(),
        Utc::now().day()
    );
    
    println!("Fetching prayer times from URL: {}", url);
    
    match get(&url) {
        Ok(response) => {
            match response.text() {
                Ok(body) => {
                    println!("Received API response");
                    match serde_json::from_str::<PrayerTimes>(&body) {
                        Ok(prayer_times) => {
                            println!("Successfully parsed prayer times data");
                            
                            // Update UI with prayer times
                            ui.set_tanggal(SharedString::from(prayer_times.data.jadwal.tanggal));
                            ui.set_imsak(SharedString::from(prayer_times.data.jadwal.imsak));
                            ui.set_subuh(SharedString::from(prayer_times.data.jadwal.subuh));
                            ui.set_dhuha(SharedString::from(prayer_times.data.jadwal.dhuha));
                            ui.set_dzuhur(SharedString::from(prayer_times.data.jadwal.dzuhur));
                            ui.set_ashar(SharedString::from(prayer_times.data.jadwal.ashar));
                            ui.set_maghrib(SharedString::from(prayer_times.data.jadwal.maghrib));
                            ui.set_isya(SharedString::from(prayer_times.data.jadwal.isya));
                            
                            println!("UI data populated, running the application");
                        },
                        Err(e) => {
                            println!("Error parsing JSON: {}", e);
                            println!("Response body: {}", body);
                            
                            // Set fallback values
                            ui.set_tanggal(SharedString::from("Error fetching data"));
                            ui.set_imsak(SharedString::from("-"));
                            ui.set_subuh(SharedString::from("-"));
                            ui.set_dhuha(SharedString::from("-"));
                            ui.set_dzuhur(SharedString::from("-"));
                            ui.set_ashar(SharedString::from("-"));
                            ui.set_maghrib(SharedString::from("-"));
                            ui.set_isya(SharedString::from("-"));
                        }
                    }
                },
                Err(e) => {
                    println!("Error getting response text: {}", e);
                    // Set error values in UI
                    ui.set_tanggal(SharedString::from("Network error"));
                    ui.set_imsak(SharedString::from("-"));
                    ui.set_subuh(SharedString::from("-"));
                    ui.set_dhuha(SharedString::from("-"));
                    ui.set_dzuhur(SharedString::from("-"));
                    ui.set_ashar(SharedString::from("-"));
                    ui.set_maghrib(SharedString::from("-"));
                    ui.set_isya(SharedString::from("-"));
                }
            }
        },
        Err(e) => {
            println!("Error fetching data: {}", e);
            // Set error values in UI
            ui.set_tanggal(SharedString::from("Connection error"));
            ui.set_imsak(SharedString::from("-"));
            ui.set_subuh(SharedString::from("-"));
            ui.set_dhuha(SharedString::from("-"));
            ui.set_dzuhur(SharedString::from("-"));
            ui.set_ashar(SharedString::from("-"));
            ui.set_maghrib(SharedString::from("-"));
            ui.set_isya(SharedString::from("-"));
        }
    }
    
    // Run the UI - this blocks until the window is closed
    ui.run()?;
    Ok(())
}